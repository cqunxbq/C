
#include<stdio.h>

int main()
{
	//算术操作符： + - * / %（余）
	//移位（二进制）操作符：>>（右移） <<（左移）
	int a = 1;
	//整型1占四个字节-32个比特位
	//00000000000000000000000000000001左移一位后为；
	//00000000000000000000000000000001
	int b = a << 10;
	printf("%d\n", b);

	//（二进制）位操作符
	
	
	//^按位异或
	int c = 3;
	int d = 5;
	//&按位与
	//int e = a & b;
	//c 011    
	//d 101
	//e 001    对应的二进制位只要有一个零就是零，全是一才为一
	//printf("%d\n", e);
	//|按位或
	//int e = c | d;
	//c 011    
	//d 101
	//e 111   对应的二进制位只要有一个一那就是一
	//printf("%d\n", e);
	int e = c ^ d;
	//c 011    
	//d 101
	//e 110     对应的二进制位相同则为0，不同则为1   
	printf("%d\n", e);


	//赋值操作符
	//= 赋值   == 判断相等
	//a = a+10    a+=10
	//a = a-10    a-=10
	//*=   /=   &=   ^=    |=    >>=   <<= 以此类推


	//单目操作符
	//  !      逻辑反操作
	int a1 = 10;
	printf("%d\n", a1);
	printf("%d\n", !a1);
	
	//	-      负值
	//	+      正值
	//	&      取地址
	//	sizeof    操作数的类型长度（以字节为单位）

	//计算数组的元素个数：

	int arr[10] = {0};
	int sz = 0;
	sz = sizeof(arr) / sizeof(arr[0]);
	printf("%d\n", sz);

	//	~      对一个数的二进制按位取反
	int A = 0;
	int B = ~A;
	//A 00000000000000000000000000000000
	//B 11111111111111111111111111111111 
	// 整数都存补码
	// 正数--原码 ，反码 ，补码相同
	// 
	// 二进制最高位为符号位，为1则为负数，为0则为正数
	//原码 ，反码 ，补码
	// 原码对应二进制位取反，符号位不变 即可得到反码
	// 补码减一得到反码
	// 11111111111111111111111111111110
	// 10000000000000000000000000000001
	// 反码转换为原码时，符号位不变，其他对应位取反
	//负数再内存中储存时，储存的是二进制的补码

	printf("%d\n", B);//使用的，打印的是这个数的原码
	
	//	--     前置、后置--

	//与下面类似
	
	//	++     前 置、后置++
	
	// int a = 10;
	// int b = a++;    后置++，先使用，再++
	// int b = ++a;    前置++，先++，再使用
	// printf("a = %d b = %d\n", a, b)；
	// 
	//	*      间接访问操作符(解引用操作符)
	//	(类型)  强制类型转换
	 
	int C = (int)45.56;
	printf("%d\n". C);
	
	//双目操作符
	//三目操作符
	//int a = 10；
	//int b = 20；
	//a+b；  + 双目操作符
	//C语言中表示真假：
	//0：假   非0： 真

	//关系操作符：
   /*   >
		>=
		<
		<=
		!=   用于测试“不相等”
		==   用于测试“相等”*/

	//逻辑操作符：
	//  &&  逻辑与
	//  ||  逻辑或
	//  !   逻辑非   逆转真假
	//  int a = 2;
	//  int b = 0;
	//  int c = a&&b;
	//  printf（"%d\n",c）;   一个为假，则为假 0 ；
	//  int c = a||b;
	//  printf（"%d\n",c）;   一个为真，则为真 1 ；

	//条件操作符：
    //exp1 ? exp2 : exp3   表达式1成立，执行2；若不成立，则执行3
	
	//下标引用、函数调用和结构成员：
	//[] 下标引用操作符   () 函数引用操作符     .    ->
	 


	
	

	return 0;
}